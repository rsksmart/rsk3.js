#!/usr/bin/env node
const yargs=require('yargs');
const repl=require('repl');
const {exec}=require('child_process');
const {Rsk3}=require('../packages/rsk3');
const privateKey='c85ef7d79691fe79573b1a7064c19c1a9819ebdbd1faaab1a8ec92344438aaf4'; // Public Key: 0xcd2a3d9f938e13cd947ec05abc7fe734df8dd826
const privateKey2='0c06818f82e04c564290b32ab86b25676731fc34e9a546108bf109194c8e3aae'; // Public Add: 0x7986b3DF570230288501EEa3D890bd66948C9B79
const address1='0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826';
const address2='0x7986b3DF570230288501EEa3D890bd66948C9B79';
let argv=yargs
  .option('compile',{
    boolean: true,
    default: false,
    describe: 'compile contracts'
  })
  .option('console',{
    boolean: true,
    default: false,
    describe: 'console of rsktest'
  })
  .option('migrate',{
    boolean: true,
    default: false,
    describe: 'migrate contracts'
  })
  .argv;

if (argv.compile) {
  exec('truffle compile',(error,stdout,stderr) => {
    if (error) {
      console.log(error);
    }
    if (stdout) {
      console.log(stdout)
    }
    if (stderr) {
      console.log(stderr)
    }
  })
}

if (argv.console) {
}

if (argv.migrate) {
  const Coin=require('./build/contracts/Coin.json');
  const rsk3=new Rsk3('http://localhost:4444');
  rsk3.defaultAccount=address1;
  const coinContract=new rsk3.Contract(Coin.abi,{
    data: Coin.bytecode,
  })
  coinContract.deploy({
    
  }).send({
    from: address1,
    gas: 1500000,
    gasPrice: '4'
  },(error,transactionHash) => {
    console.log(error,transactionHash);
    let context =  repl.start('>').context;
    context.coinContract = coinContract;
  }).on('error',(error) => {
    console.log(error)
  })
    .on('transactionHash',(transactionHash) => {
      console.log(transactionHash)
    })
    .on('receipt',(receipt) => {
      console.log(receipt.contractAddress)
    })
    .on('confirmation',(confirmationNumber,receipt) => {
      console.log(confirmationNumber,receipt)
    })
    .then((newContractInstance) => {
      
      console.log(newContractInstance.options.address)
    }).catch(error=>{
      console.log(error)
    })
}